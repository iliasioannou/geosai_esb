<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    
    <context:property-placeholder location="classpath*:wq${mule.env:#{null}}.properties"
		system-properties-mode="OVERRIDE" order="1" />
	<spring:beans>
		<spring:bean id="wqProps"
			class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<spring:property name="singleton" value="true" />
			<spring:property name="location" value="classpath:wq${mule.env:#{null}}.properties" />
		</spring:bean>
	</spring:beans>
	
    <http:listener-config name="HTTP_Listener_WQ" host="0.0.0.0" port="9190" doc:name="HTTP Listener Configuration"/>
    <http:request-config name="HTTP_Request_Activiti" host="${activiti.host}" port="${activiti.port}" basePath="${activiti.path}" doc:name="HTTP Request Configuration"  responseTimeout="180000">
    	<http:basic-authentication username="${activiti.usr}" password="${activiti.pwd}" />
    </http:request-config>
    <sub-flow name="processingFlow">
        <set-payload value="#[bodyMap]" doc:name="Set wqModisMap"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <scripting:component doc:name="Python">
            <scripting:script engine="jython"><![CDATA[# client.py
import xmlrpclib

wqProps = muleContext.getRegistry().get("wqProps")

xmlrpcServer = "http://"+wqProps["wqmodis.host"]+":"+wqProps["wqmodis.port"]

proxy = xmlrpclib.ServerProxy(xmlrpcServer)
result = proxy.execute(payload)]]></scripting:script>
        </scripting:component>
        <logger message="Py res: #[payload]" level="INFO" doc:name="Py res"/>
        <set-variable variableName="wqModisReturnCode" value="#[json:returnCode]" doc:name="wqModisReturnCode"/>
        <message-filter throwOnUnaccepted="true" doc:name="(wqModisReturnCode != 0) throw Exception!">
            <expression-filter expression="#[wqModisReturnCode.equals(&quot;0&quot;)]"/>
        </message-filter>
        <set-variable variableName="wqModisOutPath" value="#[json:outPath]" doc:name="wqModisOutPath"/>
        <flow-ref name="wqmodisLoaderFlow" doc:name="wqmodisLoaderFlow"/>
    </sub-flow>
    
    <flow name="waterqualitymodisFlow" doc:description="{
    &quot;executionId&quot;: 123456,
    &quot;signalName&quot;: &quot;test_signal&quot;,
    &quot;args&quot;: {
                  &quot;gte&quot;: &quot;Wed Jul 01 00:00:00 CEST 2015&quot;,
                  &quot;lte&quot;: &quot;Fri Jan 01 00:00:00 CET 2016&quot;
              }
}">
		<http:listener config-ref="HTTP_Listener_WQ" path="/wqeosai" doc:name="HTTP"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to HashMap"/>
        <set-variable variableName="inputPayload" value="#[payload]" doc:name="save inputPayload"/>
        <logger message="WQModis Request received: #[payload]" level="INFO" doc:name="WQModis Request received"/>
        <set-variable variableName="gte" value="#[new java.text.SimpleDateFormat(&quot;EEE MMM dd kk:mm:ss z yyyy&quot;, java.util.Locale.ENGLISH).parse(payload.get(&quot;args&quot;).get(&quot;gte&quot;))]" doc:name="gte as Date"/>
        <set-variable variableName="lte" value="#[new java.text.SimpleDateFormat(&quot;EEE MMM dd kk:mm:ss z yyyy&quot;, java.util.Locale.ENGLISH).parse(payload.get(&quot;args&quot;).get(&quot;lte&quot;))]" doc:name="lte as Date"/>

        <set-payload doc:name="Set Response" value="OK"/>
        <async doc:name="Async">
            <set-variable variableName="signalName" value="#[inputPayload.get(&quot;signalName&quot;)]" doc:name="signalName"/>
            <set-variable variableName="executionId" value="#[inputPayload.get(&quot;executionId&quot;)]" doc:name="executionId"/>
            <set-variable variableName="lteDate" value="#[lte]" doc:name="lteDate"/>
            <expression-component doc:name="Convert gte/lte format"><![CDATA[import java.text.SimpleDateFormat;

SimpleDateFormat toFormat = new SimpleDateFormat("yyyy-MM-dd");

gte = toFormat.format(gte);
lte = toFormat.format(lte);

]]></expression-component>
            <set-variable variableName="bodyMap" value="#[new java.util.HashMap()]" doc:name="create BodyMap"/>
            <expression-component doc:name="Fill body with values"><![CDATA[bodyMap.put("gte", gte);
bodyMap.put("lte", lte)

]]></expression-component>
            <flow-ref name="processingFlow" doc:name="Processing Flow"/>
			<set-payload doc:name="Set activitiSignalerFlow Request" value="{ &quot;executionId&quot;:&quot;#[executionId]&quot;,&quot;signalName&quot;:&quot;#[signalName]&quot;,&quot;vars&quot;:{&quot;result&quot;:&quot;#[wqModisReturnCode]&quot;} }"/>
            <flow-ref name="activitiSignalerFlow" doc:name="activitiSignalerFlow"/>
        </async>
                <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy when="#[exception.causedBy(org.python.core.PyException)]" doc:name="Catch Processor Python Exception Strategy">
                <logger message="#[exception.getCauseException()]" level="ERROR" doc:name="Python Error"/>
                <expression-component doc:name="activitiSignaler Flow Request"><![CDATA[java.util.HashMap vars = new java.util.HashMap();
vars.put("result", "-1");
vars.put("error", exception.getMessage()+": "+exception.getCauseException());

payload = new java.util.HashMap();
payload.put("executionId", executionId);
payload.put("signalName", signalName);
payload.put("vars", vars);

]]></expression-component>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <flow-ref name="activitiSignalerFlow" doc:name="Send Error through activitiSignaler Flow"/>
            </catch-exception-strategy>
            <catch-exception-strategy doc:name="Catch Any other Exception Strategy">
                <logger message="!EXCEPTION!#[&quot;\n&quot;] - EXCEPTION TYPE: #[exception.getCauseException().getClass()] #[&quot;\n&quot;] - EXCEPTION MESSAGE: #[exception.getMessage()] #[&quot;\n&quot;] - EXCEPTION CAUSE: #[exception.getCauseException()] #[&quot;\n&quot;] - EXCEPTION ORIGINAL PAYLOAD: #[payload]" level="ERROR" doc:name="Exception log"/>
                <expression-component doc:name="activitiSignaler Flow Request"><![CDATA[java.util.HashMap vars = new java.util.HashMap();
vars.put("result", "-1");
vars.put("error", "Modis Processor exited with error code ("+wqModisReturnCode+")");

payload = new java.util.HashMap();
payload.put("executionId", executionId);
payload.put("signalName", signalName);
payload.put("vars", vars);

]]></expression-component>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <flow-ref name="activitiSignalerFlow" doc:name="Send Error through activitiSignaler Flow"/>
            </catch-exception-strategy>

        </choice-exception-strategy>
    </flow>
    <flow name="wqmodisLoaderFlow" processingStrategy="synchronous">
        <logger message="wqModisOutPath: #[wqModisOutPath]" level="INFO" doc:name="wqModisOutPath"/>
        <logger message="#[app.registry.wqProps[&quot;wq.share.basepath&quot;] + wqModisOutPath]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="wqModisOutLocalDir" value="#[app.registry.wqProps[&quot;wq.share.basepath&quot;] + wqModisOutPath]" doc:name="wqModisOutLocalDir"/>
        <scripting:component doc:name="List directories in wqModisOutLocalDir">
            <scripting:script engine="jython"><![CDATA[import os
result = filter(lambda x: os.path.isdir(os.path.join(wqModisOutLocalDir, x)), os.listdir(wqModisOutLocalDir))]]></scripting:script>
        </scripting:component>
        <foreach doc:name="For Each">
            <set-variable variableName="dirName" value="#[payload]" doc:name="dirName"/>
            <set-variable variableName="fullDirName" value="#[wqModisOutLocalDir + dirName + &quot;/&quot;]" doc:name="fullDirName"/>
            <scripting:component doc:name="Get last prediction file">
                <scripting:script engine="jython"><![CDATA[import os
result = max(os.listdir(fullDirName))]]></scripting:script>
            </scripting:component>
            <set-variable variableName="fileName" value="#[payload]" doc:name="fileName"/>
            <set-variable variableName="noextFileName" value="#[fileName.substring( 0, fileName.lastIndexOf(&quot;.&quot;) )]" doc:name="noextFileName"/>
            <set-variable variableName="coverageName" value="#[noextFileName.split(&quot;_&quot;)[0].toUpperCase()]" doc:name="coverageName"/>
            <set-variable variableName="workspaceName" value="${geoserver.workspace}" doc:name="workspaceName"/>
            <logger message="wqmodisCreateDownload for #[fileName]" level="INFO" doc:name="wqmodisCreateDownload "/>
            <set-variable variableName="wqModisOutLocalFullPath" value="#[fullDirName + fileName]" doc:name="wqModisOutLocalFullPath"/>
            <logger message="Load file in Geoserver: #[fileName]" level="INFO" doc:name="Load file in Geoserver"/>
            <expression-component doc:name="Set payload geoserverReq HashMap"><![CDATA[payload = new java.util.HashMap();
payload.put("coveragestoreName", coverageName );
payload.put("url", "file://"+ "/opt/geoserver/data_dir/eosai/raster/" + dirName + "/" + fileName );
payload.put("workspaceName", workspaceName);
return payload;
]]></expression-component>
            <logger message="Call Geoserver flow with #[payload]" level="INFO" doc:name="Call Geoserver flow"/>
            <flow-ref name="geoserverImageMosaicFlow" doc:name="geoserverImageMosaicFlow"/>
        </foreach>
    </flow>

</mule>
